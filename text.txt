<<<<<<< HEAD
import React, { useState, useEffect } from 'react';
import { View, Text, TextInput, FlatList, StyleSheet, TouchableOpacity } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import {addDoc, collection,query, getDocs,updateDoc,deleteDoc,where,} from 'firebase/firestore';
import { db } from '../../config/firebase';
import {format,addHours,set,getUnixTime,} from 'date-fns';
import { utcToZonedTime } from 'date-fns-tz/esm';
import { ScrollView } from 'react-native-gesture-handler';
import { Button } from 'react-native-paper';

export default function NewOS() {
  const [osId, setOsId] = useState(''); 

  const [cliente, setCliente] = useState('');
  const [tipoHardware, setTipoHardware] = useState('');
  const [tipoServico, setTipoServico] = useState('');
  const [outros, setOutros] = useState('');
  const [prioridade, setPrioridade] = useState('baixa');
  const [comentario, setComentario] = useState('');
  const [descricaoProduto, setDescricaoProduto] = useState('');
  const [status, setStatus] = useState('Novo'); 
  const [editMode, setEditMode] = useState(false);
  const [osList, setOSList] = useState([]);
  
 

  const osCollectionRef = collection(db, 'teste');
  const [OS, setOS] = useState()



  const getNextOsId = async () => {
    try {
      const q = query(osCollectionRef);
      const querySnapshot = await getDocs(q);
      const osCount = querySnapshot.size;
      const nextId = osCount + 1;//aqui ele ta fazendo a contagem
      setOsId(nextId.toString());
      //console.log('osId definido:', osId); // sla parece q ele substitui ou aparece tanto o id quando a contagem desse satanas
    } catch (error) {
      console.error('Erro ao obter o próximo ID da Ordem de Serviço:', error);
    }
  };

  useEffect(() => {
    getNextOsId();
  }, []);

  const [formData, setFormData] = useState({
    data: '',
    cliente: '',
    tipoHardware: '',
    tipoServico: '',
    outros: '',
    prioridade: '',
    comentario: '',
    descricaoProduto: '',
    status: '',
  })

  const adicionarOS = async () => {
    try {
      const dataAtualUTC = new Date();
      const dataAtualBrasilia = utcToZonedTime(dataAtualUTC, 'America/Sao_Paulo');
      const dataFormatada = format(dataAtualBrasilia, 'dd-MM-yyyy / HH:mm');//yyyy-MM-dd HH:mm:ssXXX'
  
      const docRef = await addDoc(osCollectionRef, {
        data: dataFormatada,
        cliente: cliente,
        tipoHardware: tipoHardware,
        tipoServico: tipoServico,
        outros: outros,
        prioridade: prioridade,
        comentario: comentario,
        descricaoProduto: descricaoProduto,
        status: status,
      });

      setOS([...OS, docRef])
      console.log('este é um id', docRef.id);

      
      console.log('Ordem de serviço cadastrada com sucesso! ID da OS:', docRef.id);
      limparCampos();
      loadOS();
    } catch (error) {
      console.error('Erro ao cadastrar ordem de serviço:', error);
    }
  }
  
  

  const updateOS = async () => {
    if(id){
      try {
        const docRef = doc(osCollectionRef, id);
        const updateData = {
          cliente: formData.cliente,
          tipoHardware: formData.tipoHardware,
          tipoServico: formData.tipoServico,
          outros: formData.outros,
          prioridade: formData.prioridade,
          comentario: formData.comentario,
          descricaoProduto: formData.descricaoProduto,
          status: formData.status,
      };

       
        
        await updateDoc(docRef, updateData);
        console.log('Os dados da OS foram atualizados com sucesso.');
        limparCampos();
        }catch (error) {
          console.log('Erro ao atualizar os dados:', error);
        }
    }else {
    console.log('Nenhum ID de documento válido para o update.');
  }
  }

  const deleteOS = async (id) => {
    if(id) {
      try {
        await deleteDoc(doc(osCollectionRef, id));
        console.log('Os dados da OS foram excluídos com sucesso.');
        limparCampos();
        loadOS();
        const updatedOS = OS.filter((os) => os.id !== id)
        setOS(updatedOS)
      } catch (error) {
        console.error('Erro ao excluir:', error);
      }
    }else {
      console.log('Nenhum ID de documento válido para exclusão.');
    }
  } 

  const preencherFormulario = (item) => {
    setDocIdToBeUpdated(item.id); // Defina o ID do documento a ser atualizado
    setFormData({
      cliente: item.cliente,
      tipoHardware: item.tipoHardware,
      tipoServico: item.tipoServico,
      outros: item.outros,
      prioridade: item.prioridade,
      comentario: item.comentario,
      descricaoProduto: item.descricaoProduto,
      status: item.status,
    });
  }


  const listOS = async () => {
    try {
      const q = query(osCollectionRef);
      const querySnapshot = await getDocs(q);
      const osList = []
      
      querySnapshot.forEach((doc) => {
        const data = doc.data()
        osList.push({
          id: doc.id,
          cliente: data.cliente,
          tipoHardware: data.tipoHardware,
          tipoServico: data.tipoServico,
          outros: data.outros,
          prioridade: data.prioridade,
          comentario: data.comentario,
          descricaoProduto: data.descricaoProduto,
          status: data.status,
        })
      })
      setOS(osList)
      console.log('OS listadas: ', osList);
    } catch (error) {
      console.error('Erro ao listar:', error);
    }
  }

  const loadOS = async () => {
    try {
      const q = query(osCollectionRef);
      const querySnapshot = await getDocs(q);
      const osData = [];
      querySnapshot.forEach((doc) => {
        osData.push({ id: doc.id, ...doc.data() });
      });
      setOSList(osData);
    } catch (error) {
      console.error('Erro ao carregar ordens de serviço:', error);
    }
  }

  function Listar(){
    return (
     
      <FlatList
      data={OS}
      keyExtractor={(item) => item.id}
      renderItem={({ item }) => (
        <View>  
          <TouchableOpacity onPress={() => preencherFormulario(item)} style={styles.formOS}>
          <Text style={styles.subTitle}>ID: {item.id}</Text>
              <Text style={styles.subTitle}>Cliente: {item.cliente}</Text>
              <TextInput
              style={styles.input}
              placeholder='Cliente'
              placeholderTextColor='#000'
              onChangeText={(value) => setFormData({ ...formData, cliente: value })}
              value={formData.cliente}
            />
              <View style={styles.buttonContainer}>
              <Button mode='contained' onPress={() => deleteOS(item.id)}>Excluir</Button>

              <Button mode='contained' onPress={() => updateOS(item.id)}>Atualizar</Button>
              </View>
          </TouchableOpacity>
        </View>
      )}
    />
    
    )
  }

  const limparCampos = () => {
    setCliente('');
    setTipoHardware('');
    setTipoServico('');
    setOutros('');
    setPrioridade('baixa');
    setComentario('');
    setDescricaoProduto('');
    setStatus('Novo');
  }

  useEffect(() => {
    loadOS();
  }, []);

  return (
    <ScrollView>
    <View style={styles.container}>
      <Text style={styles.title}>Nova Ordem de Serviço (OS)</Text>

      <Text>ID da OS:</Text>{/**aqui ele exibe a contagem no começo, sempremicao de edicao */}
      <Text>{osId}</Text>

      <Text>Cliente:</Text>
      <TextInput placeholder="Selecione um cliente ou digite um novo" value={cliente} onChangeText={text => setCliente(text)} />

      <Text>Tipo de Hardware:</Text>
      <Picker selectedValue={tipoHardware} onValueChange={itemValue => setTipoHardware(itemValue)}>
        <Picker.Item label="Selecione" value="" />
        <Picker.Item label="Opção 1" value="Opção 1" />
        <Picker.Item label="Opção 2" value="Opção 2" />
      </Picker>

      <Text>Tipo de Serviço:</Text>
      <Picker selectedValue={tipoServico} onValueChange={itemValue => setTipoServico(itemValue)}>
        <Picker.Item label="Selecione" value="" />
        <Picker.Item label="Opção 1" value="Opção 1" />
        <Picker.Item label="Opção 2" value="Opção 2" />
      </Picker>

      <Text>Outros:</Text>
      <TextInput placeholder="Comentários adicionais" value={outros} onChangeText={text => setOutros(text)} />

      <Text>Prioridade:</Text>
      <Picker selectedValue={prioridade} onValueChange={itemValue => setPrioridade(itemValue)}>
        <Picker.Item label="Baixa" value="baixa" />
        <Picker.Item label="Média" value="média" />
        <Picker.Item label="Alta" value="alta" />
      </Picker>

      <Text>Comentário:</Text>
      <TextInput placeholder="Comentário da OS" value={comentario} onChangeText={text => setComentario(text)} />

      <Text>Descrição do Produto:</Text>
      <TextInput placeholder="Descrição do produto" value={descricaoProduto} onChangeText={text => setDescricaoProduto(text)} />

      <Text>Status:</Text>
      <Picker selectedValue={status} onValueChange={itemValue => setStatus(itemValue)} />
      <View style={styles.buttonContainer}>
      {editMode ? (
        <Button mode='contained' onPress={updateOS} title='Atualizar' >Atualizar</Button>
      ) : (
        <Button mode='contained' onPress={adicionarOS} title='Salvar' >Salvar</Button>
      )}

      <Button mode='contained' onPress={deleteOS} title='Deletar'>Deletar</Button>

      {editMode ? (
        <Button mode='contained' onPress={() => { limparCampos(); setEditMode(false); }} title='Cancelar' >Cancelar</Button>
      ) : (
        <Button mode='contained' onPress={() => setEditMode(true)} title='Editar' >Editar</Button>
      )}

      <Button mode='contained' onPress={listOS} title='Lista' >Listar</Button>
      </View>
      <Text style={styles.listTitle}>Lista de Ordens de Serviço:</Text>
      {/**O id da OS aparece com 'undefined para vizualizacao */}
      <View>
      <Listar/>
      </View>
    </View>
    </ScrollView>
  );
}

const styles = StyleSheet.create({

  container: {
    flex: 1,
    padding: 16,
    paddingBottom: "20%",
  },
  title: {
    fontSize: 18,
    fontWeight: 'bold',
  },
  listTitle: {
    fontSize: 16,
    fontWeight: 'bold',
    marginTop: 10,
  },
  flatList: {
    flex: 1,
  },
  container: {
    flex: 1,
    justifyContent: "center",
    width: '100%',
    marginBottom: '17%'
  },
  subTitle: {
    fontSize: 12,
    fontWeight: 'bold',
    color: 'black',
    padding: 5,
    paddingStart: 20,
  },
  backgroundColor: {
    flex: 1,
    widht: '100%',
  },
  input: {
    borderColor: "gray",
    borderWidth: 1,
    borderRadius: 40,
    color: '#000',
    height: 20,
    width: '90%',
    paddingStart: 20,
    marginBottom: 10,
  },
  inputContainer: {
    width: '100%',
    alignItems: 'center',
    justifyContent: 'center',
  },
  buttonContainer: {
    alignItems: 'center',
    flexDirection: 'row',
  },
  button: {
    width: '80%',
    height: 47,
    borderRadius: 40,
    marginBottom: 10,
  },
  formOS: {
    borderColor: 'red',
    borderWidth: 1,
  },
});
=======
>>>>>>> 66b29dd220e6d5d9800572fbf4163099b9c75bdf
